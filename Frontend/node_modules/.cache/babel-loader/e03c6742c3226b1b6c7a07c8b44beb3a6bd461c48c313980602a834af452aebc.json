{"ast":null,"code":"var _jsxFileName = \"/Users/adamkhalfaoui/Desktop/GitHUb/Challenge-de-code--Jobs/Frontend/src/main-component/LoginPage/index.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Grid from \"@material-ui/core/Grid\";\nimport SimpleReactValidator from \"simple-react-validator\";\nimport { toast } from \"react-toastify\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport s1 from '../../images/shape.png';\nimport './style.scss';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginPage = props => {\n  _s();\n  const [value, setValue] = useState({\n    email: 'user@gmail.com',\n    password: '123456',\n    remember: false\n  });\n  const changeHandler = e => {\n    setValue({\n      ...value,\n      [e.target.name]: e.target.value\n    });\n    validator.showMessages();\n  };\n  const rememberHandler = () => {\n    setValue({\n      ...value,\n      remember: !value.remember\n    });\n  };\n  const [validator] = React.useState(new SimpleReactValidator({\n    className: 'errorMessage'\n  }));\n  const submitForm = e => {\n    e.preventDefault();\n    if (validator.allValid()) {\n      setValue({\n        email: '',\n        password: '',\n        remember: false\n      });\n      validator.hideMessages();\n      const Login = axios.post('');\n      if (email.match(userRegex)) {\n        toast.success('You successfully Login on Khairah !');\n        props.history.push('/jobs');\n      }\n    } else {\n      validator.showMessages();\n      toast.error('Empty field is not allowed!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    className: \"loginWrapper\",\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      className: \"loginForm\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Sign In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Sign in to your account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: submitForm,\n        children: /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 3,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              className: \"inputOutline\",\n              fullWidth: true,\n              placeholder: \"E-mail\",\n              value: value.email,\n              variant: \"outlined\",\n              name: \"email\",\n              label: \"E-mail\",\n              InputLabelProps: {\n                shrink: true\n              },\n              onBlur: e => changeHandler(e),\n              onChange: e => changeHandler(e)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 29\n            }, this), validator.message('email', value.email, 'required|email')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(TextField, {\n              className: \"inputOutline\",\n              fullWidth: true,\n              placeholder: \"Password\",\n              value: value.password,\n              variant: \"outlined\",\n              name: \"password\",\n              type: \"password\",\n              label: \"Password\",\n              InputLabelProps: {\n                shrink: true\n              },\n              onBlur: e => changeHandler(e),\n              onChange: e => changeHandler(e)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 29\n            }, this), validator.message('password', value.password, 'required')]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 12,\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              className: \"formAction\",\n              children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n                control: /*#__PURE__*/_jsxDEV(Checkbox, {\n                  checked: value.remember,\n                  onChange: rememberHandler\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 46\n                }, this),\n                label: \"Remember Me\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(Link, {\n                to: \"/forgot-password\",\n                children: \"Forgot Password?\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              className: \"formFooter\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                fullWidth: true,\n                className: \"cBtnTheme\",\n                type: \"submit\",\n                children: \"Login\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"noteHelp\",\n              children: [\"Don't have an account? \", /*#__PURE__*/_jsxDEV(Link, {\n                to: \"/signup\",\n                children: \"Create free account\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 76\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"shape-img\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: s1,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n_s(LoginPage, \"JXs0SjNDKi5pPFg2PrNF/QWOxXU=\");\n_c = LoginPage;\nexport default _c2 = withRouter(LoginPage);\nvar _c, _c2;\n$RefreshReg$(_c, \"LoginPage\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useState","Grid","SimpleReactValidator","toast","TextField","Button","FormControlLabel","Checkbox","Link","withRouter","s1","axios","LoginPage","props","value","setValue","email","password","remember","changeHandler","e","target","name","validator","showMessages","rememberHandler","className","submitForm","preventDefault","allValid","hideMessages","Login","post","match","userRegex","success","history","push","error","shrink","message"],"sources":["/Users/adamkhalfaoui/Desktop/GitHUb/Challenge-de-code--Jobs/Frontend/src/main-component/LoginPage/index.js"],"sourcesContent":["import React, {useState} from 'react';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport SimpleReactValidator from \"simple-react-validator\";\r\nimport {toast} from \"react-toastify\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport {Link, withRouter} from \"react-router-dom\";\r\nimport s1 from '../../images/shape.png'\r\n\r\nimport './style.scss';\r\nimport axios from \"axios\";\r\n\r\nconst LoginPage = (props) => {\r\n    const [value, setValue] = useState({\r\n        email: 'user@gmail.com',\r\n        password: '123456',\r\n        remember: false,\r\n    });\r\n\r\n    const changeHandler = (e) => {\r\n        setValue({...value, [e.target.name]: e.target.value});\r\n        validator.showMessages();\r\n    };\r\n\r\n    const rememberHandler = () => {\r\n        setValue({...value, remember: !value.remember});\r\n    };\r\n\r\n    const [validator] = React.useState(new SimpleReactValidator({\r\n        className: 'errorMessage'\r\n    }));\r\n\r\n    const submitForm = (e) => {\r\n        e.preventDefault();\r\n        if (validator.allValid()) {\r\n            setValue({\r\n                email: '',\r\n                password: '',\r\n                remember: false\r\n            });\r\n            validator.hideMessages();\r\n\r\n            const Login = axios.post('')\r\n\r\n            if (email.match(userRegex)) {\r\n                toast.success('You successfully Login on Khairah !');\r\n                props.history.push('/jobs');\r\n            }\r\n        } else {\r\n            validator.showMessages();\r\n            toast.error('Empty field is not allowed!');\r\n        }\r\n    };\r\n    return (\r\n        <Grid className=\"loginWrapper\">\r\n            <Grid className=\"loginForm\">\r\n                <h2>Sign In</h2>\r\n                <p>Sign in to your account</p>\r\n                <form onSubmit={submitForm}>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                className=\"inputOutline\"\r\n                                fullWidth\r\n                                placeholder=\"E-mail\"\r\n                                value={value.email}\r\n                                variant=\"outlined\"\r\n                                name=\"email\"\r\n                                label=\"E-mail\"\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                                onBlur={(e) => changeHandler(e)}\r\n                                onChange={(e) => changeHandler(e)}\r\n                            />\r\n                            {validator.message('email', value.email, 'required|email')}\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                className=\"inputOutline\"\r\n                                fullWidth\r\n                                placeholder=\"Password\"\r\n                                value={value.password}\r\n                                variant=\"outlined\"\r\n                                name=\"password\"\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                InputLabelProps={{\r\n                                    shrink: true,\r\n                                }}\r\n                                onBlur={(e) => changeHandler(e)}\r\n                                onChange={(e) => changeHandler(e)}\r\n                            />\r\n                            {validator.message('password', value.password, 'required')}\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Grid className=\"formAction\">\r\n                                <FormControlLabel\r\n                                    control={<Checkbox checked={value.remember} onChange={rememberHandler}/>}\r\n                                    label=\"Remember Me\"\r\n                                />\r\n                                <Link to=\"/forgot-password\">Forgot Password?</Link>\r\n                            </Grid>\r\n                            <Grid className=\"formFooter\">\r\n                                <Button fullWidth className=\"cBtnTheme\" type=\"submit\">Login</Button>\r\n                            </Grid>\r\n\r\n                            <p className=\"noteHelp\">Don't have an account? <Link to=\"/signup\">Create free account</Link>\r\n                            </p>\r\n                        </Grid>\r\n                    </Grid>\r\n                </form>\r\n                <div className=\"shape-img\">\r\n                    <img src={s1} alt=\"\"/>\r\n                </div>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default withRouter(LoginPage);"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}